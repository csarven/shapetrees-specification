<pre class="metadata">
Title: Shape Trees Specification
Shortname: shapetrees-spec
Level: 1
Max ToC Depth: 2
Status: w3c/ED
Group: w3c
URL: https://shapetrees.org/spec
Editor: Eric Prud'hommeaux
Editor: Justin Bingham
Editor: Josh Collins
Markup Shorthands: markdown yes
Abstract:
    Semantic Web Applications interoperate by sharing semantics of terms and
    constellations of resource-oriented data structures. This specification
    defines shape trees, a mechanism for declaring and operating over
    constellations of resource-oriented data structures.
</pre>

<!-- For bikeshed style overrides -->
<style>

  em.rfc2119 {
    text-transform: lowercase;
    font-variant: small-caps;
    font-style: normal;
    font-size: 18px;
    color: #900;
  }

  figcaption {
    text-align: left;
  }

  a[href*=".ttl"] {
    color: #339966;
    border-bottom: 1px solid #339966;
  }

  a[href*=".shex"] {
    color: #cc2900;
    border-bottom: 1px solid #cc2900;
  }

  a[href*=".tree"] {
    color: #e68a00;
    border-bottom: 1px solid #e68a00;
  }

  a[data-link-type=dfn] {
    color: #000000;
  }

  table.algorithmparams {
    width: 70%;
    align: center;
  }

  table.algorithmparams tbody td {
  }

  table.algorithmparams tbody tr:nth-child(even) {
    background-color: lightgray;
  }


  table.algorithmparams thead td {
  }


  table.operationdetails {
    width: 100%;
    margin-bottom: 25px;
  }

  table.operationdetails tbody tr:nth-child(even) {
    background-color: lightgray;
  }

  table.operationdetails thead td {
    border: 1px solid #999999;
  }

  table.operationdetails tbody td {
    border: 1px solid #999999;
  }

	code.container {
		color: #005555;
	}

	code.notes {
		color: #770033;
	}

	code.citation {
		color: #330077;
	}

	code.image {
		color: #337700;
	}

  code.vocab {
		color: #339966;
	}
</style>

<div boilerplate="copyright">
MIT License Copyright 2020 W3C Solid Community Group
</div>

Introduction {#introduction}
=====================

*This section is non-normative.*

Realizing the value proposition of the Semantic Web lies in building useful and
robust applications that can interoperate over linked data. Protocols such as
[[LDP]] and Solid organize linked data graphs into resource hierarchies,
providing a foundation upon which these robust and interoperable applications
can be created.

Application interoperability depends on applications sharing semantics for
relationships and data structures.  Existing technologies fulfill portions
of those dependencies:
* [=RDF=]&apos;s foundation in unambiguous identifiers provides an infrastructure
    that allows for interoperability, but does not specifically encourage or enforce it.
* Shape languages (e.g. [[ShEx]] and [[SHACL]]) provide machine-readable,
    enforceable data structure definitions on single resources.

For applications that operate on more complex and interconnected resources,
<i>[=Shape Trees=]</i> express the layout of those resources and associate them
with their respective shapes.

[=Shape trees=] marry [=RDF=] vocabularies, shapes, and resources into
"little trees" that provide machine to machine interoperability, combining them
into concepts that humans can easily comprehend, such as medical records, notes,
notebooks, calendars, and financial records.

This allows one to treat a set of related resources as a single grouping, and
apply that to a range of operations including access control, data organization,
data validation, and data migration.

[=Shape trees=] are defined as an [=RDF=] graph structure that expresses a set
of expected behaviors by agents that work with them. These semantics CAN be
implemented by a server, or a client-side library that pre-processes requests
to a server.

While [=shape trees=] are intended to adapt to different technology platforms
that support the notion of [=containers=] and [=resources=], examples in this
specification will reflect usage in an [[LDP]] environment.

Structure {#structure}
=====================

A <dfn>shape tree</dfn> is a machine-readable template describing the expected
layout of a tree of resources in a [=container=]-based ecosystem.

The terms used to express a [=shape tree=] are described using an [=RDF=]
[vocabulary](shapetree.ttl).

The realization of a [=shape tree=] is a <dfn>planted shape tree</dfn>.
The upper-most Container of that tree is the <dfn>instance root</dfn>.

Let <code>ST</code> be a [=shape tree=];

Let <code>T</code> be a corresponding instance tree.

For any [=shape tree=] <code>S</code> linked in <code>ST</code>:

* The <code class="vocab">st:expectsType</code> arc identifies the type of a
    corresponding resource <code>R</code> in <code>T</code> where validate
    values <em class="rfc2119">MUST</em> be one of
    <code class="vocab">st:ShapeTreeResource</code>,
    <code class="vocab">st:ShapeTreeContainer</code>, or
    <code class="vocab">st:ShapeTreeNonRDFResource</code>.
* An { <code>S</code> <code class="vocab">rdfs:label</code> <code>L</code> } arc
    indicates that there is exactly one corresponding resource <code>R</code>
    and it has the name <code>L</code>.
* An { <code>S</code> <code class="vocab">st:matchesUriTemplate</code>
    <code>L</code> } arc indicates that there <em class="rfc2119">MAY</em>
    be an arbitrary number of corresponding resources <code>R</code>
    and each will have a name that matches the URI template
    [[RFC6570]] <code>L</code>.
* An { <code>S</code> <code class="vocab">st:validatedBy</code> <code>Sh</code> }
    arc indicates that <code>R</code> <em class="rfc2119">MUST</em>
    have exactly one node which conforms to shape <code>Sh</code>.
* Any { <code>S</code> <code class="vocab">st:contains</code> <code>S2</code> }
    arcs indicate there is a nested [=shape tree=] and corresponding nested
    resource <code>R2</code>.
* An { <code>S</code> <code class="vocab">st:references</code> <code>S3</code> }
    arc indicates that [=shape tree=] <code>S3</code> is referenced through the
    instance data for <code>S</code>.
* An { <code>S</code> <code class="vocab">st:supports</code> <code>S4</code> }
    arc indicates that <code>S</code> provides a different representation of
    <code>S4</code> for aggregation purposes.

A { <code class="vocab">st:hasShapeTreeDecoratorIndex</code> <code>Si</code> }
    arc indicates the location of an index of SKOS hierarchies that describe
    <code>ST</code>.

<figure id="shapetree-shex">
  <figcaption>ShEx validation of a Shape Tree</figcaption>
	<pre highlight="turtle">
  prefix st: &lt;http://www.w3.org/ns/st#&gt;.
  prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;.
  prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;.

	&lt;#ShapeTree&gt; {
    a st:ShapeTree ;
	  (
	    st:expectsType [st:ShapeTreeContainer] ;
	    st:contains @&lt;#ShapeTree&gt; +
	  ) ;
    (rdfs:label xsd:string | st:matchesUriTemplate xsd:string) ;
	  st:references @&lt;#ReferencedShapeTree&gt; * ;
	  st:validatedBy IRI ? ;
    st:contains IRI ? ;
    st:supports IRI ? ;
	}

	&lt;#ReferencedShapeTree&gt; {
	  st:hasShapeTree IRI ;
	  st:traverseViaShapePath xsd:string
	}
	</pre>
</figure>

Ecosystems {#ecosystems}
=====================
[=Shape trees=] are meant to be used in context of a broader [=ecosystem=].
[=Ecosystems=] have the ability to react to (and in some cases influence)
[=shape tree=] operations.

[=Ecosystems=] define the compatibility requirements for participating
applications and agents to be interoperable.

[=Shape trees=] are used by [=ecosystems=] to become aware of the planting of
[=shape trees=] and changes to instances of those trees.

A [=Shape tree=] client library <em class="rfc2119">MUST</em> be initialized
with a reference to the the target [=ecosystem=] it would operate within.

For purposes of this specification, an [=ecosystem=]
<em class="rfc2119">SHOULD</em> be considered a software interface, expecting
the [below operations](#ecosystem-operations) to be implemented.

Shape Tree Operations {#operations}
=====================

Working with [=shape trees=] entails using several higher-level operations --
each of which may represent one or more HTTP requests and/or pieces of
processing logic.

The key operations used to manage [=shape trees=] are:
* [Discover Shape Tree](#discover)
* [Plant Shape Tree](#plant-shapetree)
* [Create Data Instance](#create-data-instance)
* [Update Data Instance](#update-data-instance)
* [Delete Data Instance](#delete-data-instance)
* [Unplant Shape Tree](#unplant-shapetree)

These operations make use of reusable, internal algorithms defined in
[Shape Tree Algorithms](#algorithms).

## Discover Shape Tree ## {#discover}

The <b>discover shape tree</b> operation entails discovering what, if any,
shape trees are managing a given container.

### Inputs ### {#discover-inputs}
* Let <code>uri</code> be the URI of the resource to discover shape trees for

### Outputs ### {#discover-outputs}
* Collection of <code class="vocab">st:ShapeTreeLocator</code> subjects

### Operation Summary ### {#discover-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
		<tr>
			<td>[1](#discovery-details-head)</td>
			<td>Perform a HEAD on <code>uri</code> to discover Shape Tree metadata URI</td>
			<td>[Request](#fig-discover-head-request)</td>
			<td>
				[Response](#fig-discover-head-response)
			</td>
		</tr>
		<tr>
			<td>[2](#discovery-details-get)</td>
			<td>Perform a GET on the discovered Shape Tree metadata resource</td>
			<td>[Request](#fig-discover-get-metadata)</td>
			<td>
				[Managed Response](#fig-discover-head-response-managed)<br/>
				[Unmanaged Response](#fig-discover-head-response-unmanaged)
			</td>
		</tr>
		<tr>
			<td>[3](#discovery-details-collect)</td>
			<td>Collect any navigable shape trees</td>
			<td colspan="2">N/A - Logic only</td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#discovery-details}

#### Perform a HEAD on the provided <code>uri</code> to discover Shape Tree metadata URI #### {#discovery-details-head}

  Note: This step <em class="rfc2119">SHOULD</em> be performed by a
  client-side agent.

	<figure id="fig-discover-head-request">
		<figcaption><code>uri</code> = <code>/data/CommonNotes/</code></figcaption>
		<pre highlight="http">
		HEAD /data/CommonNotes/
		</pre>
	</figure>

	<figure id="fig-discover-head-response">
		<figcaption>Discover Container Shape Tree Metadata - HEAD container -
    Response</figcaption>
		<pre highlight="http">
		HTTP/1.1 200 OK
		Link: &lt;/data/CommonNotes/meta/UUID&gt;; rel="http://shapetrees.org/#ShapeTree"
    Link: &lt;http://www.w3.org/ns/ldp#Container&gt;; rel="type"
		...other headers omitted...
		</pre>
	</figure>

  Discovering shape trees only applies to URIs of containers. A status code of
  400 <em class="rfc2119">MUST</em> be returned if no Link headers with a
  relation type which maps to the implementation's notion of a [=container=]
  (e.g. `http://www.w3.org/ns/ldp#Container` in an LDP context) exists.

	Let <code>metauri</code> be the URI of the shape tree metadata resource
    pertaining to <code>uri</code> through the Link header with relation
    `http://shapetrees.org/#ShapeTree`.

#### Perform a GET on the discovered Shape Tree metadata resource (<code>metauri</code>) #### {#discovery-details-get}

  Note: This step <em class="rfc2119">SHOULD</em> performed by a
  client-side agent.

	<figure id="fig-discover-get-metadata">
		<figcaption>Discover Container Shape Tree Metadata -
    Get Shape Tree metadata - Request</figcaption>
		<pre highlight="http">
		GET /data/CommonNotes/meta/UUID
		</pre>
	</figure>

	<figure id="fig-discover-head-response-managed">
		<figcaption>Discover Container Shape Tree Metadata -
    GET Shape Tree metadata - Managed Container Response</figcaption>
		<pre highlight="turtle">
		prefix st: &lt;http://www.w3.org/ns/st#&gt;.
    prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;.
    prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;.

		&lt;#shapetree&gt;
	  	st:hasShapeTreeLocator &lt;#bc1b490a-537d-4749-b778-cd7d6da3ac56&gt; .

		&lt;#bc1b490a-537d-4749-b778-cd7d6da3ac56&gt;
			a st:ShapeTreeLocator ;
	  	st:hasRootShapeTree &lt;http://commonnote.example/commonnote#container-tree&gt; ;
	  	st:hasShapeTree &lt;http://commonnote.example/commonnote#container-tree&gt; ;
	  	st:hasShapeTreeInstanceRoot &lt;/data/CommonNotes/&gt; .
		</pre>
	</figure>

	<figure id="fig-discover-head-response-unmanaged">
		<figcaption>Discover Container Shape Tree Metadata -
    GET Shape Tree metadata - Unmanaged Container Response</figcaption>
		<pre highlight="http">
		HTTP/1.1 404 NOT FOUND
		</pre>
	</figure>

	A 404 status code indicates that no [=shape trees=] manage this
    [=container=], and so it <em class="rfc2119">MUST</em> be considered
    an [=Unmanaged Container=].

#### Collect any navigable shape trees #### {#discovery-details-collect}

  Note: This step <em class="rfc2119">SHOULD</em> performed by a
  client-side agent.

	If the ```<#shapetree>``` subject has one or more
    <code class="vocab">st:hasShapeTreeLocator</code> predicates it means this
    container <em class="rfc2119">MUST</em> be considered a [=Managed Container=].

  Let <code>mc</code> be this [=managed container=].

	The <code class="vocab">st:hasShapeTree</code> of each
    <code class="vocab">st:ShapeTreeLocator</code> subject specifies what
    [=shape tree=] manages <code>mc</code>.

  The IRI of each <code class="vocab">st:ShapeTreeLocator</code> describing a
    [=shape tree=] managing <code>mc</code> <em class="rfc2119">SHOULD</em>
    be returned.

## Plant Shape Tree ## {#plant-shapetree}

Note: A plant operation <em class="rfc2119">MAY</em>
  be performed by either a client or server side agent.

The <b>plant</b> operation marks a container (new or existing) as being
managed by one or more shape trees.

### Inputs ### {#plant-inputs}
* Let <code>req</code> be a POST or PUT HTTP request with the following
    characteristics:
    * Let <code>linkst</code> be one or more Link headers with the relation of
        &quot;http://shapetrees.org/#ShapeTree&quot;.  This represents one or more
        [=shape trees=] to be planted by the plant operation.
	  * A Link header with the relation &quot;type&quot; and a value of a compatible
        [=container=] (e.g. &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;)
	  * Let <code>linkfn</code> be an <em class="rfc2119">optional</em> Link
        header with the relation of
        &quot;http://shapetrees.org/#FocusNode&quot;.  This represents the
        target subject within the request body (used for ShEx validation, etc.)
	  * Let <code>linktst</code> be an <em class="rfc2119">OPTIONAL</em>
        Link header with the relation of &quot;http://shapetrees.org/#TargetShapeTree&quot;
    * Let <code>slug</code> be a Slug header, <em class="rfc2119">REQUIRED</em>
          when <code>req</code> is a POST and no <code>linktst</code> is provided
    * Let <code>name</code> be the portion of the URI that represents the name of
          the resource; will only be present with <code>req</code> is a PUT

### Outputs ### {#plant-outputs}
* An HTTP response containing a Location header with the URI of the container
    that the requested shape trees (<code>linkst</code>) are planted in

### Key Terms for Planting ### {#plant-keyterms}
  * Let <code>tc</code> be the <dfn>Target Container</dfn> - The container that
        will contain instances of the planted shape tree.
        This container may or may not already exist.
  * Let <code>pc</code> be the <dfn>Parent Container</dfn> - The container that
        will contain the new or existing [=target container=] representing the
        planted shape tree.  When <code>req</code> is a POST, this will be the
        location URL.  For PUT, this will be the parent of the PUT container.

### Operation Summary ### {#plant-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
    <tr>
      <td>[1](#plant-details-callhook-beforeplantshapetree)</td>
      <td>Call Ecosystem Hook - Before Plant Shape Tree</td>
      <td colspan="2">See [Before Plant Shape Tree](#ecosystem-beforeplantshapetree)</td>
    </tr>
		<tr>
			<td>[2](#plant-details-preconditions)</td>
			<td>Preconditions:
				* Discover Shape Tree(s) for Parent Container (<code>pc</code>)
				* Discover Shape Tree(s) for Target Container (<code>tc</code>)
			</td>
			<td colspan="2">See [Discovery](#discover)</td>
		</tr>
		<tr>
			<td>[3](#plant-static-validation)</td>
			<td>Static Validation of Shape Trees for Conflicts</td>
			<td colspan="2">N/A - Logic only</td>
		</tr>
		<tr>
			<td>[4](#plant-graphbody-validation)</td>
			<td>Validate Graph Body</td>
			<td colspan="2">N/A - Logic only</td>
		</tr>
		<tr>
			<td>[5](#plant-parent-validation)</td>
			<td>Validate against Parent Container (pc)</td>
			<td colspan="2">
        See [Validate Proposed Resource](#validate-proposed-resource)
      </td>
		</tr>
		<tr>
			<td>[6](#plant-create-container)</td>
			<td>Create Target Container (<code>tc</code>), if necessary</td>
			<td>[Request](#fig-plant-create-target-request)</td>
			<td>[Response](#fig-plant-create-target-response)</td>
		</tr>
		<tr>
			<td>[7](#plant-update-container-metadata)</td>
			<td>Update Shape Tree Meta Data for Target Container (<code>tc</code>)</td>
			<td colspan="2">
        See [Update Container Metadata](#update-container-metadata)
      </td>
		</tr>
		<tr>
			<td>[8](#plant-initialize-statics)</td>
			<td>Initialize Static Content</td>
			<td colspan="2">See [Initialize Static Content](#initialize-statics)</td>
		</tr>
    <tr>
			<td>[9](#plant-details-callhook-indexshapetree)</td>
			<td>Call Ecosystem Hook - Index Shape Tree</td>
			<td colspan="2">See [Index Shape Tree](#ecosystem-indexshapetree)</td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#plant-details}

#### Call Ecosystem Hook - Before Plant Shape Tree #### {#plant-details-callhook-beforeplantshapetree}

Note: This step <em class="rfc2119">SHOULD</em> be performed by
  a client-side agent.

Call the provided [=ecosystem=]'s [Before Plant Shape Tree operation](#ecosystem-beforeplantshapetree) with parameters:

<table class="data algorithmparams" align="left">
  <thead>
    <tr>
      <td><b>Parameter</b></td>
      <td><b>Value</b></td>
      <td><b>Notes</b></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>targetContainer</code></td>
      <td><code>tc</code></td>
      <td>
        The [=target container=] that will contain instance data of the
        [=shape tree=]
      </td>
    </tr>
    <tr>
      <td><code>bodyGraph</code></td>
      <td>
        [=Body Graph=] of <code>req</code>
      </td>
      <td>RDF body graph from request</td>
    </tr>
    <tr>
      <td><code>shapeTreesToPlant</code></td>
      <td><code>linkst</code></td>
      <td>
        Link header with the relation of
        "http://shapetrees.org/#TargetShapeTree"
      </td>
    </tr>
    <tr>
      <td><code>linkHeaders</code></td>
      <td>Link headers of <code>req</code></td>
      <td>All link headers from request</td>
    </tr>
</table>

#### Preconditions #### {#plant-details-preconditions}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

1. Ensure the [=Parent Container=] (<code>pc</code>) exists.  If not, this
    operation <em class="rfc2119">MUST</em> return a 404 status code.
1. [Discover](#discover) any planted [=shape tree=] IRIs managing <code>pc</code>.
	1. Let <code>parentst</code> be the collection of dereferenced shape tree
        IRIs discovered for <code>pc</code>
1. If the [=Target Container=] (<code>tc</code>) already exists,
    [discover](#discover) any previously planted shape tree IRIs.
	1. Collect any existing shape tree IRIs and combine with the IRIs of the
        <code>linkst</code> provided via the request Link header to represent
        the full collection of existing and proposed shape trees for <code>tc</code>.
	1. Let <code>allst</code> be the collection of dereferenced shape tree IRIs
        representing both existing and <code>linkst</code> IRIs

#### Static Validation of Shape Trees for Conflicts #### {#plant-static-validation}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. Iterate <code>allst</code> to validate that none of the following conditions
    are met:
	* any shape tree has a <code class="vocab">st:expectsResourceType</code>
        with a value other than <code class="vocab">st:ShapeTreeContainer</code>
	* more than one shape tree has a <code class="vocab">st:validatedBy</code> value
	* more than one shape tree has a <code class="vocab">st:contains</code> value

If any of the above static validations fail, this operation
    <em class="rfc2119">MUST</em> return a 400 status code.

#### Validate graph body #### {#plant-graphbody-validation}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

Issue: Must detail how to differentiate between ShEx and SHACL validation

1. Let <code>vst</code> be the validating shape tree that is identified by the
    only [=shape tree=] in <code>allst</code> having a
    <code class="vocab">st:validatedBy</code> value
1. If <code>vst</code> is present and the plant operation (<code>req</code>)
    includes an RDF graph body and ShEx validation is used and a [=Focus Node=]
    (<code>linkfn</code>) is not present, this operation
    <em class="rfc2119">MUST</em> return a 422 status code
1. Perform a validation of the RDF graph body of <code>req</code> using the
    <code>vst</code> <code class="vocab">st:validatedBy</code> shape,
    targeting the graph's <code>linkfn</code>.  If validation fails, this
    operation <em class="rfc2119">MUST</em> return a 422 status code

#### Validate against parent container #### {#plant-parent-validation}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. Determine if the [=Parent Container=] (<code>pc</code>) is a
    [=Managed Container=] by evaluating if <code>parentst</code> is not empty
2. If <code>pc</code> is a [=Managed Container=] call the
    [validate proposed resource](#validate-proposed-resource) algorithm with
    parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Notes</b></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>uri</code></td>
        <td><code>pc</code></td>
        <td>
          The [=parent container=] that will contain the [=target container=]
        </td>
      </tr>
      <tr>
        <td><code>rn</code></td>
        <td>
          If <code>req</code> is a POST then <code>slug</code><br/>
          If <code>req</code> is a PUT then <code>name</code>
        </td>
        <td>The name of the resource</td>
      </tr>
      <tr>
        <td><code>sth</code></td>
        <td><code>linktst</code></td>
        <td>
          Link header with the relation of
          "http://shapetrees.org/#TargetShapeTree"
        </td>
      </tr>
      <tr>
        <td><code>rt</code></td>
        <td><code class="vocab">st:ShapeTreeContainer</code></td>
        <td>The resource type being created/modified</td>
      </tr>
  </table>

#### Create Target Container (<code>tc</code>), if necessary #### {#plant-create-container}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. If <code>tc</code> does not exist, create it.

	<figure id="fig-plant-create-target-request">
		<figcaption>Create Target Container - Request</figcaption>
		<pre highlight="http">
		POST /<b><i>&lt;pc&gt;</b></i>/
		Slug: <b><i>&lt;tc&gt;</b></i>;
		Link: &lt;http://www.w3.org/ns/ldp#BasicContainer&gt;; rel="type"
		</pre>
	</figure>

	<figure id="fig-plant-create-target-response">
		<figcaption>Create Target Container - Response</figcaption>
		<pre highlight="http">
		HTTP 201 CREATED
		Location: http://pod.example/<b><i>&lt;pc&gt;</b></i>/<b><i>&lt;tc&gt;</b></i>/
		Content-type: text/turtle; charset=utf-8
		Content-length: 396
		</pre>
	</figure>


#### Update Shape Tree Meta Data for Target Container (<code>tc</code>) #### {#plant-update-container-metadata}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. Update Target Container <code>tc</code> Metadata (<code>metauri</code>)

	1. Iterate the collection of shape trees to be planted (<code>linkst</code>),
        let <code>linksti</code> be the current shape tree in context.
	1. Call algorithm [Update Container Metadata](#update-container-metadata) with
        parameters:

	<table class="data algorithmparams" align="left">
		<thead>
			<tr>
				<td><b>Parameter</b></td>
				<td><b>Value</b></td>
        <td><b>Notes</td>
			</tr>
		</thead>
		<tbody>
      <tr>
        <td><code>tc</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] to that will contain instance data of the
          [=shape tree=]
        </td>
      </tr>
			<tr>
				<td><code>rootst</code></td>
				<td><code>linksti</code></td>
        <td>The root [=shape tree=] at the top of the hierarchy</td>
			</tr>
			<tr>
				<td><code>st</code></td>
				<td><code>linksti</code></td>
        <td>The [=shape tree=] managing the [=target container=]</td>
			</tr>
			<tr>
				<td><code>rootpath</code></td>
				<td><code>tc</code></td>
        <td>
          The [=target container=] to that will contain instance data of the
          [=shape tree=]
        </td>
			</tr>
	</table>

#### Initialize Static Content #### {#plant-initialize-statics}

Note: This step <em class="rfc2119">MAY</em> be performed by either
    a client or server side agent.

1. Let <code>cst</code> be the shape tree having a
    <code class="vocab">st:contains</code> value (if one exists) from the
    list of shape trees that were planted <code>linkst</code>
1. Iterate any <code class="vocab">st:contains</code> IRIs within
    <code>cst</code>, letting <code>csti</code> be the current IRI in context
1. Let <code>cstist</code> be the shape tree resulting in dereferencing IRI
    <code>csti</code>
1. If <code>cstist</code> has a <code class="vocab">rdfs:label</code> value,
    let <code>label</code> be the value of rdfs:label for <code>cstist</code>,
    and call algorithm
    [Initialize Statics](#initialize-statics) with parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Notes</td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>pc</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] to that will contain instance data of the
          [=shape tree=]
        </td>
      </tr>
      <tr>
        <td><code>sst</code></td>
        <td><code>cstist</code></td>
        <td>The matching contained [=shape tree=]</td>
      </tr>
      <tr>
        <td><code>rst</code></td>
        <td><code>cst</code></td>
        <td>The [=shape tree=] containing a <code class="vocab">st:container</code>
      </tr>
      <tr>
        <td><code>rc</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] to that will contain instance data of the
          [=shape tree=]
        </td>
      </tr>
  </table>

#### Call Ecosystem Hook - Index Shape Tree #### {#plant-details-callhook-indexshapetree}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

1. Iterate the collection of shape trees that were planted (<code>linkst</code>),
    letting <code>linksti</code> be the current IRI in context
1. Call the provided [=ecosystem=]'s
    [Index Shape Tree operation](#ecosystem-indexshapetree) with parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Notes</td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>parentContainer</code></td>
        <td><code>pc</code></td>
        <td>
          The [=parent container=] that will contain the [=target container=]
        </td>
      </tr>
      <tr>
        <td><code>shapeTree</code></td>
        <td><code>linksti</code></td>
        <td>The [=shape tree=] managing the [=target container=]</td>
      </tr>
      <tr>
        <td><code>targetContainer</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] that will contain instance data of the
          [=shape tree=]
        </td>
      </tr>
  </table>

## Create Data Instance ## {#create-data-instance}

The <b>create data instance</b> operation creates an instance of a shape
tree within a managed container.

### Inputs ### {#create-data-instance-inputs}
* Let <code>req</code> be a POST or PUT HTTP request with the following
    characteristics:
    * Let <code>linkfn</code> be an <em class="rfc2119">OPTIONAL</em>
          Link header with the relation of "http://shapetrees.org/#FocusNode".
          This represents the target subject within the request body
          (used for ShEx validation, etc.)
    * Let <code>linktst</code> be an <em class="rfc2119">OPTIONAL</em> Link
        header with the relation of "http://shapetrees.org/#TargetShapeTree"
    * Let <code>slug</code> be a Slug header, <em class="rfc2119">REQUIRED</em>
        when <code>req</code> is a POST and no <code>linktst</code> is provided
    * Let <code>name</code> be a portion of the URI that represents the name of
        the resource. This will only be present when <code>req</code> is a PUT

### Outputs ### {#create-data-instance-outputs}
* Standard HTTP response

### Key Terms for Creating Data Instances ### {#create-data-instance-terms}
* Let <code>pc</code> be the [=Parent Container=]

### Operation Summary ### {#create-data-instance-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
    <tr>
      <td>[1](#create-data-instance-details-preconditions)</td>
      <td>Discover Shape Tree(s) for Target Container (<code>tc</code>)
      </td>
      <td colspan="2">See [Discovery](#discover)</td>
    </tr>
    <tr>
			<td>[2](#create-data-instance-details-parent-validation)</td>
			<td>Validate against parent container</td>
			<td colspan="2">
        See [Validate Proposed Resource](#validate-proposed-resource)
      </td>
		</tr>
    <tr>
			<td>[3](#create-data-instance-details-create-resource)</td>
			<td>Create Proposed Resource</td>
			<td colspan="2"></td>
		</tr>
    <tr>
			<td>[4](#create-data-instance-details-initialize-statics)</td>
			<td>Initialize Static Content</td>
			<td colspan="2">See [Initialize Static Content](#initialize-statics)</td>
		</tr>
    <tr>
			<td>
        [5](#create-data-instance-details-callhook-indexshapetreedatainstance)
      </td>
			<td>Call Ecosystem Hook - Index Shape Tree Data Instance</td>
			<td colspan="2">
        See [Index Shape Tree Data Instance](#ecosystem-indexshapetreedatainstance)
      </td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#create-data-instance-details}

#### Preconditions #### {#create-data-instance-details-preconditions}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

1. Ensure the [=Parent Container=] (<code>pc</code>) exists.  If not, return
    this operation <em class="rfc2119">MUST</em> return a 404 status code.
1. [Discover](#discover) any planted shape tree IRIs managing <code>pc</code>.
	1. Let <code>parentst</code> be the collection of dereferenced shape tree IRIs
        discovered for <code>pc</code>

#### Validate against parent container #### {#create-data-instance-details-parent-validation}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. Determine if the [=Parent Container=] (<code>pc</code>) is a
    [=Managed Container=] by evaluating if <code>parentst</code> is not empty
2. If <code>pc</code> is a [=Managed Container=] call the
    [validate proposed resource](#validate-proposed-resource) algorithm
    with parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Notes</b></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>uri</code></td>
        <td><code>pc</code></td>
        <td>
          The [=parent container=] to that will contain the [=target container=]
        </td>
      </tr>
      <tr>
        <td><code>rn</code></td>
        <td>
          If <code>req</code> is a POST then <code>slug</code><br/>
          If <code>req</code> is a PUT then <code>name</code>
        </td>
        <td>The name of the resource</td>
      </tr>
      <tr>
        <td><code>sth</code></td>
        <td><code>linktst</code></td>
        <td>The [=shape tree=] managing the [=target container=]</td>
      </tr>
      <tr>
        <td><code>rt</code></td>
        <td>
          <code class="vocab">st:ShapeTreeContainer</code> or
          <code class="vocab">st:ShapeTreeResource</code> or
          <code class="vocab">st:ShapeTreeNonRDFResource</code>
        </td>
        <td>The resource type being created</td>
      </tr>
  </table>

#### Create Resource #### {#create-data-instance-details-create-resource}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

#### Initialize Static Content #### {#create-data-instance-details-initialize-statics}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
client or server side agent.

1. Iterate any <code class="vocab">st:contains</code> IRIs within
    <code>mcst</code>, letting <code>csti</code> be the current IRI in context
1. Let <code>cstist</code> be the [=shape tree=] resulting in dereferencing IRI
    <code>csti</code>
1. If <code>cstist</code> has a <code class="vocab">rdfs:label</code> value,
    let <code>label</code> be the value of
    <code class="vocab">rdfs:label</code> for <code>cstist</code>, and
    call algorithm [Initialize Statics](#initialize-statics) with parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Note</b></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>pc</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] that will contain instance data of the
          [=shape tree=]
        </td>
      <tr>
        <td><code>sst</code></td>
        <td><code>cstist</code></td>
        <td>The matching [=shape tree=]
      </tr>
      <tr>
        <td><code>rst</code></td>
        <td><code>cst</code></td>
        <td>The parent [=shape tree=] managing the parent container
      </tr>
      <tr>
        <td><code>rc</code></td>
        <td><code>tc</code></td>
        <td>
          The [=target container=] that will contain instance data of the
          [=shape tree=]
        </td>
      </tr>
  </table>

#### Call Ecosystem Hook - Index Shape Tree Data Instance #### {#create-data-instance-details-callhook-indexshapetreedatainstance}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

Call the provided [=ecosystem=]'s
[Index Shape Tree Data Instance operation](#ecosystem-indexshapetreedatainstance)
with parameters:

<table class="data algorithmparams" align="left">
  <thead>
    <tr>
      <td><b>Parameter</b></td>
      <td><b>Value</b></td>
      <td><b>Notes</b></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>parentContainer</code></td>
      <td><code>pc</code></td>
      <td>
        The [=parent container=] that will contain the [=target container=]
      </td>
    </tr>
    <tr>
      <td><code>shapeTree</code></td>
      <td><code>mcst</code></td>
      <td>The [=shape tree=] that was used for validating the body</td>
    </tr>
    <tr>
      <td><code>shapeTreeInstance</code></td>
      <td>
        If <code>req</code> is a POST then Location header of resource creation
        <br/>
        If <code>req</code> is a PUT then URI of PUT request
      </td>
      <td>The IRI of the [=shape tree=] instance
    </tr>
</table>

## Update Data Instance ## {#update-data-instance}

The <b>update data instance</b> operation updates an instance of a
[=shape tree=] within a managed container.

### Inputs ### {#update-data-instance-inputs}
* Let <code>req</code> be a PUT or PATCH HTTP request with the following
    characteristics:
    * Let <code>linkfn</code> be an <em class="rfc2119">OPTIONAL</em>
        Link header with the relation of "http://shapetrees.org/#FocusNode".
        This represents the target subject within the request body
        (used for ShEx validation, etc.)
    * Let <code>linktst</code> be an <em class="rfc2119">OPTIONAL</em> Link
        header with the relation of "http://shapetrees.org/#TargetShapeTree"
    * Let <code>name</code> be a portion of the URI that represents the name
        of the resource, defined by the resource portion of <code>req</code>.
    * Let <code>rt</code> be the resource type

### Outputs ### {#update-data-instance-outputs}
* Standard HTTP response

### Key Terms for Updating Data Instances ### {#update-data-instance-terms}
* Let <code>pc</code> be the [=Parent Container=]

### Operation Summary ### {#update-data-instance-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
    <tr>
      <td>[1](#update-data-instance-details-preconditions)</td>
      <td>Discover Shape Tree(s) for Parent Container (<code>pc</code>)
      </td>
      <td colspan="2">See [Discovery](#discover)</td>
    </tr>
    <tr>
			<td>[2](#update-data-instance-details-parent-validation)</td>
			<td>Validate against parent container</td>
			<td colspan="2">See [Validate Resource](#validate-proposed-resource)</td>
		</tr>
    <tr>
			<td>[3](#update-data-instance-details-update-resource)</td>
			<td>Update Resource</td>
			<td colspan="2"></td>
		</tr>
    <tr>
			<td>[4](#update-data-instance-details-callhook-updateshapetreedatainstance)</td>
			<td>Call Ecosystem Hook - Update Shape Tree Data Instance</td>
			<td colspan="2">See [Update Shape Tree Data Instance](#ecosystem-updateshapetreedatainstance)</td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#update-data-instance-details}

#### Preconditions #### {#update-data-instance-details-preconditions}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

1. Ensure the [=Parent Container=] (<code>pc</code>) exists.
    If not, this operation <em class="rfc2119">MUST</em> return a 404 status code.
1. [Discover](#discover) any planted shape tree IRIs managing <code>pc</code>.
    1. Let <code>parentst</code> be the collection of dereferenced shape tree
        IRIs discovered for <code>pc</code>

#### Validate against parent container #### {#update-data-instance-details-parent-validation}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

1. Determine if the [=Parent Container=] (<code>pc</code>) is a
    [=Managed Container=] by evaluating if <code>parentst</code> is not empty
1. If <code>pc</code> is a [=Managed Container=] call the
    [validate proposed resource](#validate-proposed-resource) algorithm with
    parameters:

  <table class="data algorithmparams" align="left">
    <thead>
      <tr>
        <td><b>Parameter</b></td>
        <td><b>Value</b></td>
        <td><b>Notes</b></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>uri</code></td>
        <td><code>pc</code></td>
        <td>
          The [=parent container=] that will contain the [=target container=]
        </td>
      </tr>
      <tr>
        <td><code>rn</code></td>
        <td><code>name</code></td>
        <td>The resource name</td>
      </tr>
      <tr>
        <td><code>sth</code></td>
        <td><code>linktst</code></td>
        <td>The [=shape tree=] managing the [=target container=]</td>
      </tr>
      <tr>
        <td><code>rt</code></td>
        <td><code>rt</code></td>
        <td>The resource type being modified</td>
      </tr>
  </table>

#### Update Resource #### {#update-data-instance-details-update-resource}

Note: This step <em class="rfc2119">MAY</em> be performed by either a client
    or server side agent.

#### Call Ecosystem Hook - Update Shape Tree Data Instance #### {#update-data-instance-details-callhook-updateshapetreedatainstance}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

Call the provided [=ecosystem=]'s
[Update Shape Tree Data Instance operation](#ecosystem-updateshapetreedatainstance)
with parameters:

<table class="data algorithmparams" align="left">
  <thead>
    <tr>
      <td><b>Parameter</b></td>
      <td><b>Value</b></td>
      <td><b>Notes</b></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>shapeTree</code></td>
      <td><code>mcst</code></td>
      <td>The [=shape tree=] that was used for validating the body</td>
    </tr>
    <tr>
      <td><code>shapeTreeInstance</code></td>
      <td><code>name</code></td>
      <td>The IRI of the [=shape tree=] instance</td>
    </tr>
</table>

## Delete Data Instance ## {#delete-data-instance}

The <b>delete data instance</b> operation deletes an instance of a
[=shape tree=] within a managed container.

### Inputs ### {#delete-data-instance-inputs}
* Let <code>req</code> be a DELETE HTTP request with the following
    characteristics:
    * Let <code>linkst</code> be an <em class="rfc2119">OPTIONAL</em>
        Link header with the relation of "http://shapetrees.org/#ShapeTree"

### Outputs ### {#delete-data-instance-outputs}
* Standard HTTP response

### Key Terms for Deleting Data Instances ### {#delete-data-instance-terms}
* Let <code>pc</code> be the [=Parent Container=] of the resource being deleted

### Operation Summary ### {#delete-data-instance-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
    <tr>
			<td>[1](#delete-data-instance-details-delete-resource)</td>
			<td>Delete Resource</td>
			<td colspan="2"></td>
		</tr>
    <tr>
			<td>[2](#delete-data-instance-details-callhook-unindexshapetreedatainstance)</td>
			<td>Call Ecosystem Hook - Unindex Shape Tree Data Instance</td>
			<td colspan="2">See [Unindex Shape Tree Data Instance](#ecosystem-unindexshapetreedatainstance)</td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#delete-data-instance-details}

#### Delete Resource #### {#delete-data-instance-details-delete-resource}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

#### Call Ecosystem Hook - Unindex Shape Tree Data Instance #### {#delete-data-instance-details-callhook-unindexshapetreedatainstance}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

Call the provided [=ecosystem=]'s
[Unindex Shape Tree Data Instance operation](#ecosystem-unindexshapetreedatainstance)
with parameters:

<table class="data algorithmparams" align="left">
  <thead>
    <tr>
      <td><b>Parameter</b></td>
      <td><b>Value</b></td>
      <td><b>Notes</b></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>shapeTree</code></td>
      <td><code>linkst</code></td>
      <td>The [=shape tree=] managing the instance being removed</td>
    </tr>
    <tr>
      <td><code>shapeTreeInstance</code></td>
      <td><code>req</code>'s URI</td>
      <td>The IRI of the instance being removed</td>
    </tr>
</table>

## Unplant Shape Tree ## {#unplant-shapetree}

The <b>unplant shape tree</b> operation deletes a [=managed container=].

### Inputs ### {#unplant-shapetree-inputs}
* Let <code>req</code> be a DELETE HTTP request with the following
    characteristics:
    * Let <code>linkst</code> be a Link header with the relation of
        "http://shapetrees.org/#ShapeTree"

### Outputs ### {#unplant-shapetree-outputs}
* Standard HTTP response

### Key Terms for Deleting Data Instances ### {#unplant-shapetree-terms}
* Let <code>pc</code> be the parent [=Container=] of the resource being deleted
* Let <code>tc</code> be the [=Container=] of the resource being deleted

### Operation Summary ### {#unplant-summary}

<table class="data operationdetails" align="left">
	<thead>
		<tr>
			<th>#</th>
			<th>Step</th>
			<th colspan="2">Interaction</th>
    </tr>
	</thead>
	<tbody>
    <tr>
			<td>[1](#unplant-shapetree-details-delete-container)</td>
			<td>Delete Container</td>
      <td colspan="2"></td>
		</tr>
    <tr>
			<td>[2](#unplant-shapetree-details-callhook-unindexshapetree)</td>
			<td>Call Ecosystem Hook - Unindex Shape Tree</td>
			<td colspan="2">See [Unindex Shape Tree](#ecosystem-unindexshapetree)</td>
		</tr>
	</tbody>
</table>

### Operation Details ### {#unplant-shapetree-details}

#### Delete Container #### {#unplant-shapetree-details-delete-container}

Note: This step <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

#### Call Ecosystem Hook - Unindex Shape Tree #### {#unplant-shapetree-details-callhook-unindexshapetree}

Note: This step <em class="rfc2119">SHOULD</em> be performed by a
    client-side agent.

Call the provided [=ecosystem=]'s
[Unindex Shape Tree operation](#ecosystem-unindexshapetree) with parameters:

<table class="data algorithmparams" align="left">
  <thead>
    <tr>
      <td><b>Parameter</b></td>
      <td><b>Value</b></td>
      <td><b>Notes</b></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>parentContainer</code></td>
      <td><code>pc</code></td>
      <td>
        The [=parent container=] containing the [=managed container=] being
        deleted
      </td>
    </tr>
    <tr>
      <td><code>shapeTree</code></td>
      <td><code>linkst</code></td>
      <td>The [=shape tree=] managing the container being deleted</td>
    </tr>
    <tr>
      <td><code>shapeTreeInstance</code></td>
      <td><code>tc</code></td>
      <td>The IRI of the container being deleted</td>
    </tr>
</table>

Shape Tree Algorithms {#algorithms}
=====================

The below algorithms detail key pieces of logic required for
[=shape tree=] implementations.

## Validate Proposed Resource Against Parent Container ## {#validate-proposed-resource}

This algorithm is responsible for determining if a proposed resource
(which may more specifically be a [=container=], [=resource=], or [=non-RDF source=]) is
valid to be created within a given [=container=].

Note: This algorithm <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

**Inputs**
* Let <code>pc</code> be the URI of the [=Managed Container=] that will contain
    the proposed resource
* Let <code>sth</code> be the target shape tree hint, from the request's
    Link header with the relation of "http://shapetrees.org/#TargetShapeTree"
* Let <code>rn</code> be the resource name of the proposed request:
    * In cases of this algorithm being called as result of a POST, the Slug
        header value <em class="rfc2119">SHOULD</em> be provided when no
        <code>sth</code> is provided
    * In cases of this algorithm being called as result of a PUT, the
        resource name <em class="rfc2119">MUST</em> be provided
* Let <code>rt</code> be the resource type of proposed
    resource ([=container=], [=resource=], [=non-RDF source=])

**Outputs**
* <code>mcst</code>

**Algorithm Details**
1. Determine if the [=Parent Container=] (<code>pc</code>) is a
    [=Managed Container=] by evaluating if <code>parentst</code> is not empty
2. If <code>pc</code> is a [=Managed Container=], let <code>mcst</code> be the
    matching contained [=shape tree=] which is the result of calling the
    [matching contained shape tree](#matching-contained-shapetree) algorithm
    with parameters:
    <table class="data algorithmparams" align="left">
      <thead>
        <tr>
          <td><b>Parameter</b></td>
          <td><b>Value</b></td>
          <td><b>Notes</b></td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>uri</code></td>
          <td><code>pc</code></td>
          <td>The parent container to discover [=shape trees=] for
        </tr>
        <tr>
          <td><code>rn</code></td>
          <td>
            If <code>req</code> is a POST then <code>slug</code><br/>
            If <code>req</code> is a PUT then <code>name</code>
          </td>
          <td>The resource name</td>
        </tr>
        <tr>
          <td><code>sth</code></td>
          <td><code>sth</code></td>
          <td>The [=shape tree=] hint provided as a Link header
        </tr>
        <tr>
          <td><code>rt</code></td>
          <td><code>rt</code></td>
          <td>The resource type being created/modified</td>
        </tr>
    </table>
1. If <code>rt</code> does not match <code>mcst</code>'s
    <code class="vocab">st:expectsType</code> value, this operation
    <em class="rfc2119">MUST</em> return a 422 status code
1. If <code>mcst</code> has a <code class="vocab">st:validatedBy</code> value,
    and the plant operation (<code>req</code>) includes an RDF graph body and
    ShEx validation is used and a [=Focus Node=] (<code>linkfn</code>) is not
    present, this operation <em class="rfc2119">MUST</em> return a
    422 status code
1. Perform a validation of the RDF graph body of <code>req</code> using the
    <code>mcst</code> <code class="vocab">st:validatedBy</code> shape,
    targeting the graph's <code>linkfn</code>.  If validation fails,
    this operation <em class="rfc2119">MUST</em> return a 422 status code

## Find Matching Contained Shape Tree ## {#matching-contained-shapetree}

This algorithm is responsible for determining which [=shape tree=] within a set
of shape trees mentioned in <code class="vocab">st:contains</code> is
applicable for a given proposed resource.

Issue: This describes a new construct (the use of a link header to direct which
contained shape tree should be matched) not yet in any published implementation

Note: This algorithm <em class="rfc2119">MAY</em> be performed by either
    a client or server side agent.

**Inputs**
* Let <code>uri</code> be the URI of the [=Managed Container=] that will contain
    the proposed resource
* Let <code>rn</code> be the resource name of the proposed request:
    * In cases of this algorithm being called as result of a POST, the Slug
          header value <em class="rfc2119">SHOULD</em> be provided when
          no <code>sth</code> is provided
    * In cases of this algorithm being called as result of a PUT, the resource
          name <em class="rfc2119">MUST</em> be provided
* Let <code>sth</code> be the <em class="rfc2119">OPTIONAL</em> target
    [=shape tree=] hint, from the request's Link header with the relation
    of "http://shapetrees.org/#TargetShapeTree"
* Let <code>rt</code> be the resource type of proposed resource
    [=container=], [=resource=], or [=non-RDF source=])

**Outputs**
* A single shape tree IRI that should be used for validation

**Algorithm Details**
1. Let <code>mst</code> be the shape trees managing <code>uri</code> found by
    [discovering](#discover) the shape trees
1. Let <code>cst</code> be the shape tree within <code>mst</code> with a
    <code class="vocab">st:contains</code> value(s)
1. Let <code>ccst</code> be the candidate shape trees for matching - populated
    by each <code class="vocab">st:contains</code> of <code>cst</code>
1. If <code>sth</code> is specified
    1. and <code>sth</code> does NOT exist within <code>ccst</code> this
          algorithm <em class="rfc2119">MUST</em> return a 400 status code
    1. and <code>sth</code> exists within <code>ccst</code> return
          <code>sth</code>
1. Iterating through <code>ccst</code>, let <code>ccsti</code> be the
    [=shape tree=] currently evaluated
1. If <code>rn</code> matches <code>ccsti</code>
    <code class="vocab">st:matchesUriTemplate</code> using [[RFC6570]] add to
    potential matches (<code>pm</code>)
1. If <code>pm</code> contains more than 1 matching shape trees, this
    algorithm <em class="rfc2119">MUST</em> return a status code 400
1. If <code>pm</code> contains exactly 1 matching shape trees, return
    <code>pm</code>
1. If <code>pm</code> contains 0 matching shape trees:
    1. If <code>ccst</code> does not contain any of
        <code class="vocab">st:AllowAll</code>,
        <code class="vocab">st:AllowResources</code>,
        <code class="vocab">st:AllowContainers</code>,
        <code class="vocab">st:AllowNonRDFSources</code>,
        this algorithm <em class="rfc2119">MUST</em> return a status code of 422
    1. If <code class="vocab">st:AllowNone</code> exists within
        <code>ccst</code>, this algorithm <em class="rfc2119">MUST</em>
        return a status code 422
    1. If <code class="vocab">st:AllowAll</code> exists within
        <code>ccst</code>, return null - indicating that while no match was
        found, <code>pc</code> has been configured to allow resources of any
        type to be created without matching the shape tree
    1. If <code class="vocab">st:AllowResources</code> exists within
        <code>ccst</code>:
        1. And the resource type (<code>rt</code>) is not a Resource,
              this algorithm <em class="rfc2119">MUST</em>
              return a status code of 422
        1. And the resource type (<code>rt</code>) is a Resource,
              return null - indicating that while no match was found,
              <code>pc</code> has been configured to allow Resources to be
              created without matching the shape tree
	  1. If <code class="vocab">st:AllowContainers</code> exists within
        <code>ccst</code>:
        1. And the resource type (<code>rt</code>) is not a Container,
              this algorithm <em class="rfc2119">MUST</em>
              return a status code of 422
        1. And the resource type (<code>rt</code>) is a Container,
              return null - indicating that while no match was found,
              <code>pc</code> has been configured to allow Containers to be
              created without matching the shape tree
	  1. If <code class="vocab">st:AllowNonRDFSources</code> exists within
        <code>ccst</code>:
        1. And the resource type (<code>rt</code>) is not a Non-RDF Source,
              this algorithm <em class="rfc2119">MUST</em>
              return a status code of 422
        1. And the resource type (<code>rt</code>) is a Non-RDF Source,
              return null - indicating that while no match was found,
              <code>pc</code> has been configured to allow non-RDF Sources to
              be created without matching the shape tree

## Initialize Static Content ## {#initialize-statics}

This algorithm is responsible for initializing static content that is implied
through the creation of its parent.  When called, it recursively seeks out
resources to be statically created.

Note: This algorithm <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

**Inputs**
* Let <code>pc</code> be the URI of the parent [=container=] that any statics
    would be created within
* Let <code>sst</code> be the static shape tree to be initialized where an
    <code class="vocab">rdfs:label</code> is set
* Let <code>rst</code> be the root shape tree that was planted at the top of
    this shape tree hierarchy
* Let <code>rc</code> be the root container at the top of this shape tree
    hierarchy

**Outputs**
* Nothing

**Algorithm Details**

1. Let <code>label</code> be the <code class="vocab">rdfs:label</code> value of
    the provided &quot;static&quot; shape tree (<code>sst</code>)
1. Create the expected resource using a PUT in order to have control of resource
    naming, letting <code>cr</code> be the resulting resource that was created
    1. Set the appropriate Link header with "type" relation based on the
        <code class="vocab">st:expectsType</code> value of <code>sst</code>
1. If the <code class="vocab">st:expectsType</code> value of <code>sst</code>
    is <code class="vocab">st:ShapeTreeContainer</code>:
    1. Call algorithm [Update Container Metadata](#update-container-metadata)
        with parameters:
    	<table class="data algorithmparams" align="left">
    		<thead>
    			<tr>
    				<td><b>Parameter</b></td>
    				<td><b>Value</b></td>
            <td><b>Notes</b></td>
    			</tr>
    		</thead>
    		<tbody>
          <tr>
            <td><code>tc</code></td>
            <td><code>cr</code></td>
            <td>Created static resource</td>
    			<tr>
    				<td><code>rootst</code></td>
    				<td><code>rst</code></td>
            <td>The root [=shape tree=] of the hierarchy</td>
    			</tr>
    			<tr>
    				<td><code>st</code></td>
    				<td><code>sst</code></td>
            <td>The [=shape tree=] to assign to <code>cr</code>
    			</tr>
    			<tr>
    				<td><code>rootpath</code></td>
    				<td><code>rc</code></td>
            <td>The root container at the top of this shape tree hierarchy</td>
    			</tr>
    	</table>

    1. If <code>sst</code> has any values for
        <code class="vocab">st:contains</code>:
        1. Iterate any <code class="vocab">st:contains</code> IRIs within
            <code>sst</code>, letting <code>cssti</code> be the current IRI
            in context
        1. Let <code>csstit</code> be the shape tree resulting in dereferencing
            IRI <code>cssti</code>
        1. If <code>csstit</code> has a <code class="vocab">rdfs:label</code>
            value then recursively call algorithm
              [Initialize Statics](#initialize-statics) with parameters:
              <table class="data algorithmparams" align="left">
                <thead>
                  <tr>
                    <td><b>Parameter</b></td>
                    <td><b>Value</b></td>
                    <td><b>Notes</b></td>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td><code>pc</code></td>
                    <td><code>cr</code></td>
                    <td>Created static resource, now the parent</td>
                  <tr>
                    <td><code>sst</code></td>
                    <td><code>csstit</code></td>
                    <td>A [=shape tree=] to be recursively planted</td>
                  </tr>
                  <tr>
                    <td><code>rst</code></td>
                    <td><code>rst</code></td>
                    <td>The root [=shape tree=] of the hierarchy</td>
                  </tr>
                  <tr>
                    <td><code>rc</code></td>
                    <td><code>rc</code></td>
                    <td>The root container at the top of this shape tree hierarchy</td>
                  </tr>
              </table>

## Update Container Metadata ## {#update-container-metadata}

This algorithm is responsible for updating the shape tree metadata for a
container to reflect what shapetree(s) manage that container
and the container's location relative to the broader hierarchy of shape trees.

Note: This algorithm <em class="rfc2119">MAY</em> be performed by either a
    client or server side agent.

**Inputs**:
* Let <code>tc</code> be the URI of the [=Container=] to update metadata for
* Let <code>rootst</code> be the root [=shape tree=] within a hierarchy of
    shape tree containers
* Let <code>st</code> be a [=shape tree=] that will manage <code>tc</code>
* Let <code>rootpath</code> be the URI of the root of this shape tree hierarchy,
    where <code>rootst</code> is planted

**Outputs**:
* Nothing

**Algorithm Details**
1. Perform a HEAD on Target Container <code>tc</code>
	<figure id="fig-container-head-request">
		<figcaption>Discover Target Container Shape Tree Metadata URI -
    Request</figcaption>
		<pre highlight="http">
		HEAD /data/CommonNotes/
		</pre>
	</figure>

	<figure id="fig-container-head-response">
		<figcaption>Discover Target Container Shape Tree Metadata URI -
    Response</figcaption>
		<pre highlight="http">
		HTTP/1.1 200 OK
		Link: &lt;/data/CommonNotes/meta/UUID&gt;; rel="http://shapetrees.org/#ShapeTree"
		...other headers omitted...
		</pre>
	</figure>

	Let <code>metauri</code> be the URI of the shape tree metadata resource
    pertaining to <code>uri</code>.

1. Perform a GET on the Target Container's Shape Tree metadata (<code>metauri</code>)
	<figure id="fig-container-get-metadata">
		<figcaption>Dereference Target Container Shape Tree Metadata URI -
    Request</figcaption>
		<pre highlight="http">
		GET /data/CommonNotes/meta/UUID
		</pre>
	</figure>

	<figure id="fig-container-get-response-managed">
		<figcaption>Dereference Target Container Shape Tree Metadata URI -
    Managed Response</figcaption>
		<pre highlight="turtle">
		@prefix st: &lt;http://www.w3.org/ns/st#&gt;.

		&lt;#shapetree&gt;
	  	st:hasShapeTreeLocator &lt;#bc1b490a-537d-4749-b778-cd7d6da3ac56&gt; .

		&lt;#bc1b490a-537d-4749-b778-cd7d6da3ac56&gt;
			a st:ShapeTreeLocator ;
	  	st:hasRootShapeTree &lt;http://commonnote.example/commonnote#container-tree&gt; ;
	  	st:hasShapeTree &lt;http://commonnote.example/commonnote#container-tree&gt; ;
	  	st:hasShapeTreeInstanceRoot &lt;/data/CommonNotes/&gt; .
		</pre>
	</figure>

	<figure id="fig-container-get-response-unmanaged">
		<figcaption>Dereference Target Container Shape Tree Metadata URI -
    Unmanaged Response</figcaption>
		<pre highlight="http">
		HTTP/1.1 404 NOT FOUND
		</pre>
	</figure>

    If a 404 is returned that indicates that no shape trees manage this container.
    Let <code>eg</code> be the existing metadata graph resulting from dereferencing
    and parsing <code>metauri</code>.

1. Populate the metadata graph with triples

    Using <code>eg</code>, if it exists, otherwise a new graph, the following
    triples should be added:

    <table class="data operationdetails" align="left">
    	<thead>
    		<tr>
    			<th>Subject</th>
    			<th>Predicate</th>
    			<th>Object</th>
    			<th>Description</th>
        </tr>
    	</thead>
    	<tbody>
    		<tr>
    			<td nowrap>&lt;#<b><i>generated UUID</i></b>&gt;</td>
    			<td>rdf:type</td>
    			<td><code class="vocab">st:ShapeTreeLocator</code></td>
    			<td>Indicates the RDF class of the subject</td>
    		</tr>
    		<tr>
    			<td>&lt;#<b><i>generated UUID</i></b>&gt;</td>
    			<td><code class="vocab">st:hasRootShapeTree</code></td>
    			<td><b><i>rootst</i></b></td>
    			<td>
            Describes the shape tree planted at the root of this shape tree
            hierarchy
        </td>
    		</tr>
    		<tr>
    			<td>&lt;#<b><i>generated UUID</i></b>&gt;</td>
    			<td><code class="vocab">st:hasShapeTree</code></td>
    			<td><b><i>st</i></b></td>
    			<td>Describes the shape tree planted at this container</td>
    		</tr>
    		</tr>
    		<tr>
    			<td>&lt;#<b><i>generated UUID</i></b>&gt;</td>
    			<td><code class="vocab">st:hasShapeTreeInstanceRoot</code></td>
    			<td><b><i>rootpath</i></b></td>
    			<td>
            Describes the URI to the root container of this shape tree
            hierarchy
          </td>
    		</tr>
    		<tr>
    			<td>&lt;#shapetree&gt;</td>
    			<td><code class="vocab">st:hasShapeTreeLocator</code></td>
    			<td>&lt;#<b><i>generated UUID</i></b>&gt;</td>
    			<td>
            Describes a navigable relationship to a given
            <code class="vocab">st:ShapeTreeLocator</code>
          </td>
    		</tr>
    	</tbody>
    </table>

1. Persist the above triples to <code>metauri</code>.

Ecosystem Operations {#ecosystem-operations}
=====================

## Get Planted Shape Tree ## {#ecosystem-getplantedshapetree}
<code>
  <b>getPlantedShapeTreeFromContainer</b>(context:ShapeTreeContext,
    parentContainer:URI,
    shapeTreesToPlant:ShapeTree[],
    resourceName:String) : ShapeTreeLocator
</code>

This operation allows the [=ecosystem=] to provide a previously
[=planted shape tree=] location.

## Before Plant Shape Tree ## {#ecosystem-beforeplantshapetree}
<code>
  <b>beforePlantShapeTree</b>(context:ShapeTreeContext,
  targetContainer:URI,
  bodyGraph:Graph,
  shapeTreesToPlant:ShapeTree[],
  linkHeaders:Map) : Graph</code>
</code>

This operations allows the [=ecosystem=] to modify the the [=body graph=] of a
[Plant Shape Tree](#plant-shapetree) operation request.

## Index Shape Tree ## {#ecosystem-indexshapetree}
<code>
  <b>indexShapeTree</b>(context:ShapeTreeContext,
  parentContainer:URI,
  shapest:URI,
  targetContainer:URI)
</code>

This operation notifies the [=ecosystem=] of a new [=shape tree=] being planted.

## Index Shape Tree Data Instance ## {#ecosystem-indexshapetreedatainstance}
<code>
  <b>indexShapeTreeDataInstance</b>(context:ShapeTreeContext,
  parentContainer:URI,
  shapest:URI,
  shapeTreeInstance:URI)
</code>

This operations notifies the [=ecosystem=] of a new
[=shape tree data instance=] being created.

## Update Shape Tree Data Instance ## {#ecosystem-updateshapetreedatainstance}
<code>
  <b>updateShapeTreeDataInstance</b>(context:ShapeTreeContext,
  shapest:URI,
  shapeTreeInstance:URI)
</code>

This operations notifies the [=ecosystem=] of a changed
[=shape tree data instance=].

## Unindex Shape Tree Data Instance ## {#ecosystem-unindexshapetreedatainstance}
<code>
  <b>unIndexShapeTreeDataInstance</b>(context:ShapeTreeContext,
  shapest:URI,
  shapeTreeInstance:URI)
</code>

This operation notifies the [=ecosystem=] of a [=shape tree data instance=]
being deleted.

## Unindex Shape Tree ## {#ecosystem-unindexshapetree}
<code>
  <b>unIndexShapeTree</b>(context:ShapeTreeContext, parentContainer:URI,
   shapest:URI, targetContainer:URI)</code>

This operation notifies the [=ecosystem=] of a
[=shape tree=]/[=managed container=] being deleted.

Note: The <code><b>ShapeTreeContext</b></code> class is implementation specific
and may be used to include important context such as authentication details,
base URLs, etc.

Describing Shape Trees {#describing}
=====================

While the RDF structure of [=shape trees=] enable machine readability, additional
context is needed to make it human-friendly.

External [=SKOS graphs=] can be <em class="rfc2119">OPTIONALLY</em> linked to
describe the shape tree in human-readable terms.

* Let <code>STR</code> be an RDF document containing one or more
    [=shape trees=] <code>STs</code>.
* The { &lt;&gt; <code class="vocab">st:hasShapeTreeDecoratorIndex</code>
    <code>IDX</code> } arc indicates that there is exactly one
    <code class="vocab">st:ShapeTreeDecoratorIndex</code> located at
    <code>IDX</code>.
* The { <code>IDX</code> <code>a</code>
    <code class="vocab">st:ShapeTreeDecoratorIndex</code> } arc indicates a
    <code class="vocab">st:ShapeTreeDecoratorIndex</code> that represents an
    index of <code class="vocab">st:ShapeTreeDecoratorSeries</code>.
* The { <code>IDX</code> <code class="vocab">st:hasSeries</code>
    <code>SERIES</code> } arc indicates linkage to one or more
    <code class="vocab">st:ShapeTreeDecoratorSeries</code>.
* The { <code>SERIES</code> <code>a</code>
    <code class="vocab">st:ShapeTreeDecoratorSeries</code> } arc indicates a
    <code class="vocab">st:ShapeTreeDecoratorSeries</code> that represent a
    series of versioned [=SKOS graphs=] for a given language or interpretation.
* The { <code>SERIES</code> <code class="vocab">st:hasHierarchy</code>
    <code>HIER</code> } arc indicates linkage to one or more
    <code class="vocab">st:ShapeTreeDecoratorHierarchy</code>.
* The { <code>HIER</code> <code>a</code>
    <code class="vocab">st:ShapeTreeDecoratorHierarchy</code> } arc indicates
    a <code class="vocab">st:ShapeTreeDecoratorHierarchy</code> that represent
    a single versioned [=SKOS graph=].
    * The { <code>HIER</code> <code class="vocab">st:hasSkosGraph</code>
        <code>SKOS</code> } arc indicates that there is exactly one
        [=SKOS graph=] describing <code>STs</code>
    * The { <code>HIER</code> <code class="vocab">st:hasVersion</code>
        <code>VERSION</code> } arc indicates the version of the [=SKOS graph=]
        <code>SKOS</code>
    * The { <code>HIER</code> <code class="vocab">st:hasSHA256</code>
        <code>HASH</code> } arc indicates the hash of [=SKOS graph=]
        <code>SKOS</code>
* Each { <code>SKOSSUB</code> <code>a</code>
    <code class="vocab">st:ShapeTreeLabel</code> } in <code>SKOS</code>
    refers back to the [=shape tree=] <code>ST</code> via the
    { <code>SKOSSUB</code> <code class="vocab">st:hasShapeTree</code>
    <code>ST</code> } arc.

SKOS constructs such as <code>skos:narrower</code> <em class="rfc2119">MAY</em>
  be used to group or organize related [=shape trees=].

Definitions {#definitions}
=====================
The following terms are used throughout this specification:
  * <dfn>Body Graph</dfn> -- the RDF graph derived from parsing the body of an
        HTTP request with a parser determined by the Content-type: header of that
        HTTP request.
  * <dfn>Container</dfn> -- The generalized notion of a collection of resources;
        implementations of [=shape trees=] <em class="rfc2119">MAY</em> use a
        container implementation such as [[LDP]]
        (ldp:Container, ldp:BasicContainer, etc.)
  * <dfn>Ecosystem</dfn> -- a software environment with resources organized in
        some hierarchical grouping that rely on [=shape tree=] concepts to
        better organize and validate structures of data
  * <dfn>Focus Node</dfn> -- The IRI to an RDF subject which is used to
        specify which subject within a document should be processed first.  In
        the context of [=shape trees=] one usage is directing shape validation
        to the appropriate node in the graph.
  * <dfn>Managed Container</dfn> -- any [=container=] that has a [=shape tree=]
        planted in it. A [=Managed Container=] <em class="rfc2119">MAY</em>
        be an [=Instance Root=] or hierarchically nested within the
        resource hierarchy.
  * <dfn>Non-RDF Source</dfn> -- The generalized notion of document not
        containing linked-data triples; this may include
        plain text or binary data.
  * <dfn>RDF</dfn> -- Resource Description Framework [[rdf11-primer]]
  * <dfn>Resource</dfn> -- The generalized notion of document containing linked-data;
        implementations of [=shape trees=] may use a resource implementation such
        as [[LDP]] (ldp:Resource, etc.)
  * <dfn>Shape Tree Data Instance</dfn>A resource hierarchy that adheres to one
         or more [=shape trees=]
  * <dfn>SKOS Graph</dfn> -- an RDF graph conforming to [[[skos-reference]]]
        [[skos-reference]] data model.  For purposes of [=shape trees=] a
        [=SKOS Graph=] is used to describe a [=shape tree=] in
        human-readable terms.
  * <dfn>Unmanaged Container</dfn> -- any [=Container=] which is not described
        by a shape tree

  <pre class="biblio">
  {
    "shex": {
      "href": "http://shex.io/shex-semantics/index.html",
      "title": "Shape Expressions Language 2.1",
      "authors": [
        "Eric Prud'hommeaux",
        "Iovka Boneva",
        "Jose Emilio Labra Gayo",
        "Gregg Kellogg"
      ]
    }
  }
  </pre>
